package events

// GENERATED CODE! DO NOT EDIT THIS FILE!
// ADD YOUR EVENT AND RUN 'go generate' INSTEAD

import (
	"time"
)

const (
	buffersLength                         = 10000
	idleDispatcherSleepTime time.Duration = 5 * time.Millisecond
)

type TimeTickListener interface {
	HandleTimeTick(*TimeTick)
}

type ProjectileFiredListener interface {
	HandleProjectileFired(*ProjectileFired)
}

type UserInputListener interface {
	HandleUserInput(*UserInput)
}

type EventDispatcher struct {
	timeTickQueue     chan *TimeTick
	timeTickListeners []TimeTickListener

	projectileFiredQueue     chan *ProjectileFired
	projectileFiredListeners []ProjectileFiredListener

	userInputQueue     chan *UserInput
	userInputListeners []UserInputListener
}

var instance = &EventDispatcher{

	timeTickQueue:     make(chan *TimeTick, buffersLength),
	timeTickListeners: []TimeTickListener{},

	projectileFiredQueue:     make(chan *ProjectileFired, buffersLength),
	projectileFiredListeners: []ProjectileFiredListener{},

	userInputQueue:     make(chan *UserInput, buffersLength),
	userInputListeners: []UserInputListener{},
}

func Instance() *EventDispatcher {
	return instance
}

func (d *EventDispatcher) RunEventLoop() {
	for {
		select {

		case event := <-d.timeTickQueue:
			for _, listener := range d.timeTickListeners {
				listener.HandleTimeTick(event)
			}

		case event := <-d.projectileFiredQueue:
			for _, listener := range d.projectileFiredListeners {
				listener.HandleProjectileFired(event)
			}

		case event := <-d.userInputQueue:
			for _, listener := range d.userInputListeners {
				listener.HandleUserInput(event)
			}

		default:
			time.Sleep(idleDispatcherSleepTime)
		}
	}
}

func (d *EventDispatcher) RegisterTimeTickListener(listener TimeTickListener) {
	d.timeTickListeners = append(d.timeTickListeners, listener)
}

func (d *EventDispatcher) FireTimeTick(e *TimeTick) {
	d.timeTickQueue <- e
}

func (d *EventDispatcher) RegisterProjectileFiredListener(listener ProjectileFiredListener) {
	d.projectileFiredListeners = append(d.projectileFiredListeners, listener)
}

func (d *EventDispatcher) FireProjectileFired(e *ProjectileFired) {
	d.projectileFiredQueue <- e
}

func (d *EventDispatcher) RegisterUserInputListener(listener UserInputListener) {
	d.userInputListeners = append(d.userInputListeners, listener)
}

func (d *EventDispatcher) FireUserInput(e *UserInput) {
	d.userInputQueue <- e
}
