// Code generated by protoc-gen-go.
// source: superstellar.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	superstellar.proto

It has these top-level messages:
	Message
	IntVector
	Vector
	Spaceship
	PlayerLeft
	Space
	Hello
	UserMessage
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UserInput int32

const (
	UserInput_CENTER     UserInput = 0
	UserInput_LEFT       UserInput = 1
	UserInput_RIGHT      UserInput = 2
	UserInput_THRUST_ON  UserInput = 3
	UserInput_THRUST_OFF UserInput = 4
	UserInput_FIRE_START UserInput = 5
	UserInput_FIRE_STOP  UserInput = 6
)

var UserInput_name = map[int32]string{
	0: "CENTER",
	1: "LEFT",
	2: "RIGHT",
	3: "THRUST_ON",
	4: "THRUST_OFF",
	5: "FIRE_START",
	6: "FIRE_STOP",
}
var UserInput_value = map[string]int32{
	"CENTER":     0,
	"LEFT":       1,
	"RIGHT":      2,
	"THRUST_ON":  3,
	"THRUST_OFF": 4,
	"FIRE_START": 5,
	"FIRE_STOP":  6,
}

func (x UserInput) String() string {
	return proto.EnumName(UserInput_name, int32(x))
}
func (UserInput) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Message struct {
	// Types that are valid to be assigned to Content:
	//	*Message_Space
	//	*Message_Hello
	//	*Message_PlayerLeft
	Content isMessage_Content `protobuf_oneof:"content"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isMessage_Content interface {
	isMessage_Content()
}

type Message_Space struct {
	Space *Space `protobuf:"bytes,1,opt,name=space,oneof"`
}
type Message_Hello struct {
	Hello *Hello `protobuf:"bytes,2,opt,name=hello,oneof"`
}
type Message_PlayerLeft struct {
	PlayerLeft *PlayerLeft `protobuf:"bytes,3,opt,name=playerLeft,oneof"`
}

func (*Message_Space) isMessage_Content()      {}
func (*Message_Hello) isMessage_Content()      {}
func (*Message_PlayerLeft) isMessage_Content() {}

func (m *Message) GetContent() isMessage_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Message) GetSpace() *Space {
	if x, ok := m.GetContent().(*Message_Space); ok {
		return x.Space
	}
	return nil
}

func (m *Message) GetHello() *Hello {
	if x, ok := m.GetContent().(*Message_Hello); ok {
		return x.Hello
	}
	return nil
}

func (m *Message) GetPlayerLeft() *PlayerLeft {
	if x, ok := m.GetContent().(*Message_PlayerLeft); ok {
		return x.PlayerLeft
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Message) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Message_OneofMarshaler, _Message_OneofUnmarshaler, _Message_OneofSizer, []interface{}{
		(*Message_Space)(nil),
		(*Message_Hello)(nil),
		(*Message_PlayerLeft)(nil),
	}
}

func _Message_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Message)
	// content
	switch x := m.Content.(type) {
	case *Message_Space:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Space); err != nil {
			return err
		}
	case *Message_Hello:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Hello); err != nil {
			return err
		}
	case *Message_PlayerLeft:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PlayerLeft); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Message.Content has unexpected type %T", x)
	}
	return nil
}

func _Message_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Message)
	switch tag {
	case 1: // content.space
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Space)
		err := b.DecodeMessage(msg)
		m.Content = &Message_Space{msg}
		return true, err
	case 2: // content.hello
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Hello)
		err := b.DecodeMessage(msg)
		m.Content = &Message_Hello{msg}
		return true, err
	case 3: // content.playerLeft
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PlayerLeft)
		err := b.DecodeMessage(msg)
		m.Content = &Message_PlayerLeft{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Message_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Message)
	// content
	switch x := m.Content.(type) {
	case *Message_Space:
		s := proto.Size(x.Space)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_Hello:
		s := proto.Size(x.Hello)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_PlayerLeft:
		s := proto.Size(x.PlayerLeft)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type IntVector struct {
	X int32 `protobuf:"varint,1,opt,name=x" json:"x,omitempty"`
	Y int32 `protobuf:"varint,2,opt,name=y" json:"y,omitempty"`
}

func (m *IntVector) Reset()                    { *m = IntVector{} }
func (m *IntVector) String() string            { return proto.CompactTextString(m) }
func (*IntVector) ProtoMessage()               {}
func (*IntVector) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Vector struct {
	X float32 `protobuf:"fixed32,1,opt,name=x" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y" json:"y,omitempty"`
}

func (m *Vector) Reset()                    { *m = Vector{} }
func (m *Vector) String() string            { return proto.CompactTextString(m) }
func (*Vector) ProtoMessage()               {}
func (*Vector) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Spaceship struct {
	Id          uint32     `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Position    *IntVector `protobuf:"bytes,2,opt,name=position" json:"position,omitempty"`
	Velocity    *Vector    `protobuf:"bytes,3,opt,name=velocity" json:"velocity,omitempty"`
	Facing      float32    `protobuf:"fixed32,4,opt,name=facing" json:"facing,omitempty"`
	InputThrust bool       `protobuf:"varint,5,opt,name=inputThrust" json:"inputThrust,omitempty"`
}

func (m *Spaceship) Reset()                    { *m = Spaceship{} }
func (m *Spaceship) String() string            { return proto.CompactTextString(m) }
func (*Spaceship) ProtoMessage()               {}
func (*Spaceship) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Spaceship) GetPosition() *IntVector {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *Spaceship) GetVelocity() *Vector {
	if m != nil {
		return m.Velocity
	}
	return nil
}

type PlayerLeft struct {
	Id uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *PlayerLeft) Reset()                    { *m = PlayerLeft{} }
func (m *PlayerLeft) String() string            { return proto.CompactTextString(m) }
func (*PlayerLeft) ProtoMessage()               {}
func (*PlayerLeft) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type Space struct {
	PhysicsFrameID uint32       `protobuf:"varint,1,opt,name=physicsFrameID" json:"physicsFrameID,omitempty"`
	Spaceships     []*Spaceship `protobuf:"bytes,2,rep,name=spaceships" json:"spaceships,omitempty"`
}

func (m *Space) Reset()                    { *m = Space{} }
func (m *Space) String() string            { return proto.CompactTextString(m) }
func (*Space) ProtoMessage()               {}
func (*Space) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Space) GetSpaceships() []*Spaceship {
	if m != nil {
		return m.Spaceships
	}
	return nil
}

type Hello struct {
	MyId uint32 `protobuf:"varint,1,opt,name=myId" json:"myId,omitempty"`
}

func (m *Hello) Reset()                    { *m = Hello{} }
func (m *Hello) String() string            { return proto.CompactTextString(m) }
func (*Hello) ProtoMessage()               {}
func (*Hello) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type UserMessage struct {
	UserInput UserInput `protobuf:"varint,1,opt,name=userInput,enum=superstellar.UserInput" json:"userInput,omitempty"`
}

func (m *UserMessage) Reset()                    { *m = UserMessage{} }
func (m *UserMessage) String() string            { return proto.CompactTextString(m) }
func (*UserMessage) ProtoMessage()               {}
func (*UserMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func init() {
	proto.RegisterType((*Message)(nil), "superstellar.Message")
	proto.RegisterType((*IntVector)(nil), "superstellar.IntVector")
	proto.RegisterType((*Vector)(nil), "superstellar.Vector")
	proto.RegisterType((*Spaceship)(nil), "superstellar.Spaceship")
	proto.RegisterType((*PlayerLeft)(nil), "superstellar.PlayerLeft")
	proto.RegisterType((*Space)(nil), "superstellar.Space")
	proto.RegisterType((*Hello)(nil), "superstellar.Hello")
	proto.RegisterType((*UserMessage)(nil), "superstellar.UserMessage")
	proto.RegisterEnum("superstellar.UserInput", UserInput_name, UserInput_value)
}

func init() { proto.RegisterFile("superstellar.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 458 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x93, 0x51, 0x6f, 0xd3, 0x30,
	0x14, 0x85, 0x97, 0x34, 0xc9, 0x9a, 0xdb, 0xad, 0x8a, 0x2e, 0x08, 0x22, 0xc1, 0xc3, 0x14, 0x21,
	0x40, 0x20, 0x4d, 0x88, 0x09, 0x21, 0xf1, 0xc6, 0x58, 0x43, 0x23, 0x8d, 0x6d, 0x72, 0x53, 0x1e,
	0x78, 0x99, 0xb2, 0xe0, 0x2d, 0x41, 0x5d, 0x62, 0xd9, 0x2e, 0x5a, 0xfe, 0x12, 0xbf, 0x81, 0x1f,
	0x87, 0x6d, 0x92, 0xac, 0x29, 0xbc, 0xf9, 0xdc, 0xfb, 0x1d, 0xf5, 0x9c, 0xdb, 0x16, 0x50, 0xac,
	0x19, 0xe5, 0x42, 0xd2, 0xd5, 0x2a, 0xe3, 0x87, 0x8c, 0xd7, 0xb2, 0xc6, 0xbd, 0xcd, 0x59, 0xf4,
	0xcb, 0x82, 0xdd, 0x2f, 0x54, 0x88, 0xec, 0x86, 0xe2, 0x6b, 0x70, 0x05, 0xcb, 0x72, 0x1a, 0x5a,
	0x07, 0xd6, 0xcb, 0xc9, 0xdb, 0x07, 0x87, 0x03, 0xf7, 0x42, 0xaf, 0xe6, 0x3b, 0xe4, 0x2f, 0xa3,
	0xe1, 0x42, 0x2d, 0xea, 0xd0, 0xfe, 0x1f, 0x3c, 0xd7, 0x2b, 0x0d, 0x1b, 0x06, 0x3f, 0x00, 0xb0,
	0x55, 0xd6, 0x50, 0x7e, 0x4a, 0xaf, 0x65, 0x38, 0x32, 0x8e, 0x70, 0xe8, 0xb8, 0xe8, 0xf7, 0xca,
	0xb6, 0x41, 0x1f, 0xfb, 0xb0, 0x9b, 0xd7, 0x95, 0xa4, 0x95, 0x8c, 0x5e, 0x80, 0x9f, 0x54, 0xf2,
	0x2b, 0xcd, 0x65, 0xcd, 0x71, 0x0f, 0xac, 0x3b, 0x93, 0xd4, 0x25, 0xd6, 0x9d, 0x56, 0x8d, 0x89,
	0xa2, 0x54, 0x13, 0x3d, 0x03, 0x6f, 0x9b, 0xb2, 0x07, 0x94, 0xad, 0xa9, 0xdf, 0x16, 0xf8, 0xa6,
	0x95, 0x28, 0x4a, 0x86, 0x53, 0xb0, 0xcb, 0xef, 0x06, 0xdd, 0x27, 0xea, 0x85, 0x47, 0x30, 0x66,
	0xb5, 0x28, 0x65, 0x59, 0x57, 0x6d, 0xc7, 0xc7, 0xc3, 0xc4, 0x7d, 0x14, 0xd2, 0x83, 0xf8, 0x06,
	0xc6, 0x3f, 0xe9, 0xaa, 0xce, 0x4b, 0xd9, 0xb4, 0x35, 0x1f, 0x0e, 0x4d, 0x9d, 0xa3, 0xa3, 0xf0,
	0x11, 0x78, 0xd7, 0x59, 0x5e, 0x56, 0x37, 0xa1, 0x63, 0x72, 0xb5, 0x0a, 0x0f, 0x60, 0x52, 0x56,
	0x6c, 0x2d, 0xd3, 0x82, 0xaf, 0x85, 0x0c, 0x5d, 0xb5, 0x1c, 0x93, 0xcd, 0x51, 0xf4, 0x14, 0xe0,
	0xfe, 0x68, 0xdb, 0xf1, 0xa3, 0x02, 0x5c, 0xd3, 0x0d, 0x9f, 0xc3, 0x94, 0x15, 0x8d, 0x28, 0x73,
	0x11, 0xf3, 0xec, 0x96, 0x26, 0x27, 0x2d, 0xb4, 0x35, 0xc5, 0xf7, 0x00, 0xa2, 0x3b, 0x86, 0x50,
	0x8d, 0x47, 0xff, 0x36, 0xee, 0x8f, 0x45, 0x36, 0xd0, 0xe8, 0x09, 0xb8, 0xe6, 0xeb, 0x46, 0x04,
	0xe7, 0xb6, 0x49, 0xba, 0x10, 0xe6, 0x1d, 0x9d, 0xc0, 0x64, 0x29, 0x28, 0xef, 0x7e, 0x62, 0xef,
	0xc0, 0x5f, 0x2b, 0x99, 0xe8, 0x1a, 0x86, 0x9b, 0x6e, 0x7f, 0xc6, 0xb2, 0x5b, 0x93, 0x7b, 0xf2,
	0xd5, 0x0f, 0xf0, 0xfb, 0x39, 0x02, 0x78, 0x9f, 0x66, 0x67, 0xe9, 0x8c, 0x04, 0x3b, 0x38, 0x06,
	0xe7, 0x74, 0x16, 0xa7, 0x81, 0x85, 0x3e, 0xb8, 0x24, 0xf9, 0x3c, 0x4f, 0x03, 0x1b, 0xf7, 0xc1,
	0x4f, 0xe7, 0x64, 0xb9, 0x48, 0x2f, 0xcf, 0xcf, 0x82, 0x91, 0xba, 0x0c, 0x74, 0x32, 0x8e, 0x03,
	0x47, 0xeb, 0x38, 0x21, 0xb3, 0xcb, 0x45, 0xfa, 0x91, 0xa4, 0x81, 0xab, 0xf1, 0x56, 0x9f, 0x5f,
	0x04, 0xde, 0xb1, 0xf3, 0xcd, 0x66, 0x57, 0x57, 0x9e, 0xf9, 0xb3, 0x1c, 0xfd, 0x09, 0x00, 0x00,
	0xff, 0xff, 0x2e, 0x3e, 0x9d, 0x68, 0x42, 0x03, 0x00, 0x00,
}
